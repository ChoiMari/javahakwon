package com.itwill.controller;

import com.itwill.model.Member;

// MVC 아키텍쳐에서 컨트롤러 역할을 담당할 인터페이스.(메서드 이름,리턴타입,파라미터 선언만) - 구현은 implements하는 클래스에서
// DAO(Data Access Object) 데이터를 접근하는 오브젝트.
//데어터 접근? 데이터가 저장된 곳에 접근해서 데이터들을 읽기,쓰기,변경하는 역할을 담당하는 컨트롤러.

// DTO 데이터를 전달하는 오브젝트와 구분하기! - 이건 전달하는 기능이 아니라 전달할 때 사용하는 객체(모델)

public interface MemberDao { // 프로그램에서 필요한 기능들을 약속
	
	int MAX_LENGTH = 3; // 배열의 최대 길이로 사용할 상수.
	// 인터페이스의 필드는 항상 퍼블릭 스테틱 파이널로 만들어 짐. 그래서 이 수식어는 생략 가능 함.
	
	/**
	 * 새로운 회원 정보를 만들어서 배열에 저장한다(목적어가 있으면 파라미터가 필요)
	 * @param member 배열에 저장할 Member 타입 객체.
	 * @return 배열에 회원 정보를 저장 성공하면 1, 저장 실패하면 0
	 */
	int create(Member member); //앞에 public 추상 수식어가 생략된 것.
	
	/**
	 * 배열에 있는 내용 읽어 오게 배열에 있는 모든 내용 리턴해주면 좋겠다..
	 * 회원 전제 목록 검색. 회원 정보가 저장된 배열을 리턴하는 메서드.
	 * (배열만 리턴하면 되니까 파라미터 선언 필요없음) - 호출 시 값을 전달받아 동작할 게 없으니까
	 */
	Member[] read(); //멤버를 저장하는 배열. 파라미터 없다라고 설계
	
	/**
	 * 배열 특정 인덱스에 있는 회원정보 한 개를 가져올 수 있는 메서드.
	 * 인덱스를 사용한 회원 정보 검색.
	 * 회원 배열의 특정 인덱스에 있는 회원 정보를 리턴하는 메서드.
	 * @param index 검색에 필요한 인덱스. 0이상의 정수.(인덱스 0 부터 시작하니까)
	 *  보통 @파람 옆에 변수이름으로 사용할 문자를 써준다.
	 *  몇번 인덱스인지 호출할 때 정보를 주어야 찾아서 리턴해주니까 파라미터 선언 필요함
	 *  @return Member 타입 객체.
	 *  아규먼트 index가 회원 배열의 인덱스 범위 안에 있으면, Member 타입 객체를 리턴.
	 *  아규먼트 index가 배열 범위 밖이면(음수이거나 배열의 크기보다 더 큰 인덱스 값이 들어 온다면) null을 리턴.
	 */
	Member read(int index);
	//만약 아규먼트로 음수 또는 배열의 범위를 넘어서는 숫자를 줄 경우..어떻게 리턴값을 줄 건지 생각해야..
	
	
	/**
	 * 회원 정보 업데이트 기능
	 * 회원 배열의 특정 인덱스에 있는 회원의 정보 중에서 비밀번호를 변경하는 메서드.
	 * @param index 회원 배열에서 수정할 회원 정보의 위치(인덱스 - 0이상의 정수) 
	 * @param password 변경할 새 비밀번호.
	 * @return 업데이트 성공하면 1, 실패하면 0 
	 */
	int update(int index,String password);
	
}
